/**
 * @brief
 *		     Linux USB HID gadget driver
 *
 * Introduction
 *
 * The HID Gadget driver provides emulation of USB Human Interface
 * Devices (HID). The basic HID handling is done in the kernel,
 * and HID reports can be sent/received through I/O on the
 * /dev/hidgX character devices.
 *
 * For more details about HID, see the developer page on
 * http://www.usb.org/developers/hidpage/
 *
 * Configuration
 *
 * g_hid is a platform driver, so to use it you need to add
 * struct platform_device(s) to your platform code defining the
 * HID function descriptors you want to use - E.G. something
 * like:
 *
 * #include <linux/platform_device.h>
 *
 * #include <linux/usb/g_hid.h>
 *
 * /* hid descriptor for a keyboard */
 *
 * static struct hidg_func_descriptor my_hid_data = {
 *
 * 	.subclass		= 0, /* No subclass */
 * 	.protocol		= 1, /* Keyboard */
 * 	.report_length		= 8,
 * 	.report_desc_length	= 63,
 * 	.report_desc		= {
 * 		0x05, 0x01,		// USAGE_PAGE (Generic Desktop)
 * 		0x09, 0x06,		// USAGE (Keyboard)
 * 		0xa1, 0x01,		// COLLECTION (Application)
 * 		0x05, 0x07,		//   USAGE_PAGE (Keyboard)
 * 		0x19, 0xe0,		//   USAGE_MINIMUM (Keyboard LeftControl)
 * 		0x29, 0xe7,		//   USAGE_MAXIMUM (Keyboard Right GUI)
 * 		0x15, 0x00,		//   LOGICAL_MINIMUM (0)
 * 		0x25, 0x01,		//   LOGICAL_MAXIMUM (1)
 * 		0x75, 0x01,		//   REPORT_SIZE (1)
 * 		0x95, 0x08,		//   REPORT_COUNT (8)
 * 		0x81, 0x02,		//   INPUT (Data,Var,Abs)
 * 		0x95, 0x01,		//   REPORT_COUNT (1)
 * 		0x75, 0x08,		//   REPORT_SIZE (8)
 * 		0x81, 0x03,		//   INPUT (Cnst,Var,Abs)
 * 		0x95, 0x05,		//   REPORT_COUNT (5)
 * 		0x75, 0x01,		//   REPORT_SIZE (1)
 * 		0x05, 0x08,		//   USAGE_PAGE (LEDs)
 * 		0x19, 0x01,		//   USAGE_MINIMUM (Num Lock)
 * 		0x29, 0x05,		//   USAGE_MAXIMUM (Kana)
 * 		0x91, 0x02,		//   OUTPUT (Data,Var,Abs)
 * 		0x95, 0x01,		//   REPORT_COUNT (1)
 * 		0x75, 0x03,		//   REPORT_SIZE (3)
 * 		0x91, 0x03,		//   OUTPUT (Cnst,Var,Abs)
 * 		0x95, 0x06,		//   REPORT_COUNT (6)
 * 		0x75, 0x08,		//   REPORT_SIZE (8)
 * 		0x15, 0x00,		//   LOGICAL_MINIMUM (0)
 * 		0x25, 0x65,		//   LOGICAL_MAXIMUM (101)
 * 		0x05, 0x07,		//   USAGE_PAGE (Keyboard)
 * 		0x19, 0x00,		//   USAGE_MINIMUM (Reserved)
 * 		0x29, 0x65,		//   USAGE_MAXIMUM (Keyboard Application)
 * 		0x81, 0x00,		//   INPUT (Data,Ary,Abs)
 * 		0xc0			// END_COLLECTION
 * 	}
 * };
 *
 * static struct platform_device my_hid = {
 *
 * 	.name			= "hidg",
 * 	.id			= 0,
 * 	.num_resources		= 0,
 * 	.resource		= 0,
 * 	.dev.platform_data	= &my_hid_data,
 * };
 *
 * static int __init hidg_init(void){
 *
 * 	 int status;
 *
 * 	status = platform_device_register(&my_hid);
 * 	if(status < 0){
 * 		printk("my hid device register failed\n");
 * 		return status;
 * 	}
 *
 * 	status = platform_driver_probe(&hidg_plat_driver,
 * 			hidg_plat_driver_probe);
 * 	if (status < 0)
 * 		return status;
 *
 * 	status = usb_composite_probe(&hidg_driver);
 * 	if (status < 0)
 * 		platform_driver_unregister(&hidg_plat_driver);
 *
 * 	return status;
 * }
 *
 *
 *  You can add as many HID functions as you want, only limited by
 *  the amount of interrupt endpoints your gadget driver supports.
 *
 *
 *  @author Ingenic
 *
 *  @version 1.0.0
 */
	usbhid_sample Description;
